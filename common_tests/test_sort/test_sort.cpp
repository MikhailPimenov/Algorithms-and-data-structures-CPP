#include "test_sort.h"


void test_sort ( void ( *algorithm ) ( int *, int ), const char *name )
{
    std::cout << "test_sort: ";
    if ( name )
        std::cout << name;
    std::cout << '\n';

    int array1[] = { 1, 3, 2, 5, 4 };
    int length1 = sizeof ( array1 ) / sizeof ( array1[0] );

    int array1_sorted[] = { 1, 2, 3, 4, 5 };
    algorithm ( array1, length1 );
    std::cout << "test #1: "
              << ( ( Common::is_equal ( array1, array1_sorted, length1 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array2[] = { 5, 5, 5, 5, 5 };
    int length2 = sizeof ( array2 ) / sizeof ( array2[0] );

    int array2_sorted[] = { 5, 5, 5, 5, 5 };
    algorithm ( array2, length2 );
    std::cout << "test #2: "
              << ( ( Common::is_equal ( array2, array2_sorted, length2 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array3[] = { 5, 5, 4, 5, 5 };
    int length3 = sizeof ( array3 ) / sizeof ( array3[0] );

    int array3_sorted[] = { 4, 5, 5, 5, 5 };
    algorithm ( array3, length3 );
    std::cout << "test #3: "
              << ( ( Common::is_equal ( array3, array3_sorted, length3 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array4[] = { 5, 15, 14, 25, 15, 9, 7, 10, 10, 0, 2 };
    int length4 = sizeof ( array4 ) / sizeof ( array4[0] );

    int array4_sorted[] = { 0, 2, 5, 7, 9, 10, 10, 14, 15, 15, 25 };
    algorithm ( array4, length4 );
    std::cout << "test #4: "
              << ( ( Common::is_equal ( array4, array4_sorted, length4 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array5[] = { 1,5,7,8,9,4,5,6,1,2,3,0,2,
                     4,9,8,7,1,2,5,4,7,9,8,6,5,
                     4,3,2,1,0,3,2,1,4,5,7,8,9,
                     8,5,6,8,7,0,9,2,1,5,4,8,9,
                     6,1,5,7,8,1,0,3,1,4,7,9,8,
                     6,4,5,3,1,0,2,5,7,2,7,3,9 };
    int length5 = sizeof ( array5 ) / sizeof ( array5[0] );

    int array5_sorted[] = { 0,0,0,0,0,1,1,1,1,1,1,1,1,
                            1,1,2,2,2,2,2,2,2,2,3,3,3,
                            3,3,3,4,4,4,4,4,4,4,4,5,5,
                            5,5,5,5,5,5,5,5,6,6,6,6,6,
                            7,7,7,7,7,7,7,7,7,8,8,8,8,
                            8,8,8,8,8,9,9,9,9,9,9,9,9 };
    algorithm ( array5, length5 );
    std::cout << "test #5: "
              << ( ( Common::is_equal ( array5, array5_sorted, length5 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array6[] = { 4,8,7,6,0,9,4,3,8,1,7,2,0,4,0,7,0,7,9,8,
                     6,8,5,7,4,6,3,5,2,4,1,4,3,1,2,6,4,7,6,5,
                     3,1,6,9,1,5,2,9,1,6,1,3,1,2,8,7,9,7,8,6,
                     5,3,1,2,9,5,9,7,6,8,3,1,2,6,2,9,7,6,8,3,
                     1,6,2,9,7,6,8,2,4,1,5,4,4,5,7,8,8,9,5,6,
                     3,1,3,1,6,4,6,5,7,9,4,9,1,3,4,2,7,9,8,3,
                     4,2,1,3,2,9,5,9,7,8,4,2,1,4,7,8,9,6,5,2,
                     3,1,4,7,8,9,2,1,5,7,2,5,6,1,4,5,4,8,6,0,
                     8,6,9,7,8,9,0,1,2,3,4,1,1,2,3,0,7,8,6,4,
                     8,5,8,7,8,9,9,0,5,1,2,0,0,4,5,7,0,3,8,1, };
    int length6 = sizeof ( array6 ) / sizeof ( array6[0] );

    int array6_sorted[] = { 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
                            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,
                            2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,
                            3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,
                            4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,
                            5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,
                            6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,
                            7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,
                            8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,
                            9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, };
    algorithm ( array6, length6 );
    std::cout << "test #6: "
              << ( ( Common::is_equal ( array6, array6_sorted, length6 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array7[] = { 1,5,7,8,9,4,5,6,1,2,3,0,2,
                     6,1,5,7,8,1,0,3,1,4,7,9,8,
                     4,9,8,7,1,2,5,4,7,9,8,6,5,
                     8,5,6,8,7,0,9,2,1,5,4,8,9,
                     4,3,2,1,0,3,2,1,4,5,7,8,9,
                     6,4,5,3,1,0,2,5,7,2,7,3,9 };
    int length7 = sizeof ( array7 ) / sizeof ( array7[0] );

    int array7_sorted[] = { 0,0,0,0,0,1,1,1,1,1,1,1,1,
                            1,1,2,2,2,2,2,2,2,2,3,3,3,
                            3,3,3,4,4,4,4,4,4,4,4,5,5,
                            5,5,5,5,5,5,5,5,6,6,6,6,6,
                            7,7,7,7,7,7,7,7,7,8,8,8,8,
                            8,8,8,8,8,9,9,9,9,9,9,9,9 };
    algorithm ( array7, length7 );
    std::cout << "test #7: "
              << ( ( Common::is_equal ( array7, array7_sorted, length7 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array8[] = { 4,8,7,6,0,9,4,3,8,1,7,2,0,4,0,7,0,7,9,8,
                     1,6,2,9,7,6,8,2,4,1,5,4,4,5,7,8,8,9,5,6,
                     3,1,4,7,8,9,2,1,5,7,2,5,6,1,4,5,4,8,6,0,
                     3,1,3,1,6,4,6,5,7,9,4,9,1,3,4,2,7,9,8,3,
                     3,1,6,9,1,5,2,9,1,6,1,3,1,2,8,7,9,7,8,6,
                     4,2,1,3,2,9,5,9,7,8,4,2,1,4,7,8,9,6,5,2,
                     5,3,1,2,9,5,9,7,6,8,3,1,2,6,2,9,7,6,8,3,
                     6,8,5,7,4,6,3,5,2,4,1,4,3,1,2,6,4,7,6,5,
                     8,6,9,7,8,9,0,1,2,3,4,1,1,2,3,0,7,8,6,4,
                     8,5,8,7,8,9,9,0,5,1,2,0,0,4,5,7,0,3,8,1, };
    int length8 = sizeof ( array8 ) / sizeof ( array8[0] );

    int array8_sorted[] = { 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
                            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,
                            2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,
                            3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,
                            4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,
                            5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,
                            6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,
                            7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,
                            8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,
                            9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, };
    algorithm ( array8, length8 );
    std::cout << "test #8: "
              << ( ( Common::is_equal ( array8, array8_sorted, length8 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array9[] = {
                      8,6,9,7,8,9,0,1,2,3,4,1,1,2,3,0,7,8,6,4,
                      8,5,8,7,8,9,9,0,5,1,2,0,0,4,5,7,0,3,8,1,
                      6,8,5,7,4,6,3,5,2,4,1,4,3,1,2,6,4,7,6,5,
                      5,3,1,2,9,5,9,7,6,8,3,1,2,6,2,9,7,6,8,3,
                      4,8,7,6,0,9,4,3,8,1,7,2,0,4,0,7,0,7,9,8,
                      4,2,1,3,2,9,5,9,7,8,4,2,1,4,7,8,9,6,5,2,
                      3,1,6,9,1,5,2,9,1,6,1,3,1,2,8,7,9,7,8,6,
                      3,1,4,7,8,9,2,1,5,7,2,5,6,1,4,5,4,8,6,0,
                      3,1,3,1,6,4,6,5,7,9,4,9,1,3,4,2,7,9,8,3,
                      1,6,2,9,7,6,8,2,4,1,5,4,4,5,7,8,8,9,5,6,
                   };
    int length9 = sizeof ( array9 ) / sizeof ( array9[0] );

    int array9_sorted[] = { 0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
                            1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,
                            2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,
                            3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,
                            4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,
                            5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,
                            6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,
                            7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,
                            8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,
                            9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9, };
    algorithm ( array9, length9 );
    std::cout << "test #9: "
              << ( ( Common::is_equal ( array9, array9_sorted, length9 ) ) ? "ok" : "FAILED" )
              << '\n';


    int array10[] = {
                      8,6,9,7,8,9,0,1,2,3,4,1,1,2,3,0,7,8,6,4,0,
                      8,5,8,7,8,9,9,0,5,1,2,0,0,4,5,7,0,3,8,1,1,
                      6,8,5,7,4,6,3,5,2,4,1,4,3,1,2,6,4,7,6,5,2,
                      5,3,1,2,9,5,9,7,6,8,3,1,2,6,2,9,7,6,8,3,3,
                      4,8,7,6,0,9,4,3,8,1,7,2,0,4,0,7,0,7,9,8,4,
                      4,2,1,3,2,9,5,9,7,8,4,2,1,4,7,8,9,6,5,2,5,
                      3,1,6,9,1,5,2,9,1,6,1,3,1,2,8,7,9,7,8,6,6,
                      3,1,4,7,8,9,2,1,5,7,2,5,6,1,4,5,4,8,6,0,7,
                      3,1,3,1,6,4,6,5,7,9,4,9,1,3,4,2,7,9,8,3,8,
                      1,6,2,9,7,6,8,2,4,1,5,4,4,5,7,8,8,9,5,6,9,
                   };
    int length10 = sizeof ( array10 ) / sizeof ( array10[0] );

    int array10_sorted[] = {
                             0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
                             1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,
                             2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,
                             3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,
                             4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,
                             5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,
                             6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,
                             7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,
                             8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,
                             9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
                           };
    algorithm ( array10, length10 );
    std::cout << "test #10: "
              << ( ( Common::is_equal ( array10, array10_sorted, length10 ) ) ? "ok" : "FAILED" )
              << '\n';


}
